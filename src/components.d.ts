/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MenubarItem } from "./utils/types";
export { MenubarItem } from "./utils/types";
export namespace Components {
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface ZanitMenubar {
        /**
          * Path of the current item.
          * @default undefined
         */
        "current": string | undefined;
        /**
          * The data to build the menu (as an array of `MenubarItem` or a JSON array) or the url to fetch to retrieve it.
         */
        "data": Promise<MenubarItem[]> | MenubarItem[] | URL | string;
        /**
          * Delay in milliseconds before closing the menu after a mouseout event. Useful to avoid immediate closing when the pointer briefly leaves the component.
          * @default 500
         */
        "mouseOutTimeout": number | undefined;
        /**
          * Initial search query.
          * @default undefined
         */
        "searchQuery": string | undefined;
    }
    /**
     * Mobile menubar component.
     */
    interface ZanitMobileMenubar {
        /**
          * IDs path of the current item.
          * @default []
         */
        "currentPath": string[];
        /**
          * Menubar items.
          * @default []
         */
        "items": MenubarItem[];
        /**
          * Whether the menubar is loading the data.
          * @default false
         */
        "loading": boolean;
        /**
          * Initial search query.
          * @default undefined
         */
        "searchQuery": string | undefined;
    }
    interface ZanitSearchForm {
        /**
          * Initial search query
          * @default undefined
         */
        "searchQuery": string | undefined;
    }
}
export interface ZanitSearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZanitSearchFormElement;
}
declare global {
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface HTMLZanitMenubarElement extends Components.ZanitMenubar, HTMLStencilElement {
    }
    var HTMLZanitMenubarElement: {
        prototype: HTMLZanitMenubarElement;
        new (): HTMLZanitMenubarElement;
    };
    /**
     * Mobile menubar component.
     */
    interface HTMLZanitMobileMenubarElement extends Components.ZanitMobileMenubar, HTMLStencilElement {
    }
    var HTMLZanitMobileMenubarElement: {
        prototype: HTMLZanitMobileMenubarElement;
        new (): HTMLZanitMobileMenubarElement;
    };
    interface HTMLZanitSearchFormElementEventMap {
        "search": { query: string };
        "resetSearch": void;
    }
    interface HTMLZanitSearchFormElement extends Components.ZanitSearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZanitSearchFormElementEventMap>(type: K, listener: (this: HTMLZanitSearchFormElement, ev: ZanitSearchFormCustomEvent<HTMLZanitSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZanitSearchFormElementEventMap>(type: K, listener: (this: HTMLZanitSearchFormElement, ev: ZanitSearchFormCustomEvent<HTMLZanitSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZanitSearchFormElement: {
        prototype: HTMLZanitSearchFormElement;
        new (): HTMLZanitSearchFormElement;
    };
    interface HTMLElementTagNameMap {
        "zanit-menubar": HTMLZanitMenubarElement;
        "zanit-mobile-menubar": HTMLZanitMobileMenubarElement;
        "zanit-search-form": HTMLZanitSearchFormElement;
    }
}
declare namespace LocalJSX {
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface ZanitMenubar {
        /**
          * Path of the current item.
          * @default undefined
         */
        "current"?: string | undefined;
        /**
          * The data to build the menu (as an array of `MenubarItem` or a JSON array) or the url to fetch to retrieve it.
         */
        "data"?: Promise<MenubarItem[]> | MenubarItem[] | URL | string;
        /**
          * Delay in milliseconds before closing the menu after a mouseout event. Useful to avoid immediate closing when the pointer briefly leaves the component.
          * @default 500
         */
        "mouseOutTimeout"?: number | undefined;
        /**
          * Initial search query.
          * @default undefined
         */
        "searchQuery"?: string | undefined;
    }
    /**
     * Mobile menubar component.
     */
    interface ZanitMobileMenubar {
        /**
          * IDs path of the current item.
          * @default []
         */
        "currentPath"?: string[];
        /**
          * Menubar items.
          * @default []
         */
        "items"?: MenubarItem[];
        /**
          * Whether the menubar is loading the data.
          * @default false
         */
        "loading"?: boolean;
        /**
          * Initial search query.
          * @default undefined
         */
        "searchQuery"?: string | undefined;
    }
    interface ZanitSearchForm {
        "onResetSearch"?: (event: ZanitSearchFormCustomEvent<void>) => void;
        /**
          * Emitted on search form submission.
         */
        "onSearch"?: (event: ZanitSearchFormCustomEvent<{ query: string }>) => void;
        /**
          * Initial search query
          * @default undefined
         */
        "searchQuery"?: string | undefined;
    }
    interface IntrinsicElements {
        "zanit-menubar": ZanitMenubar;
        "zanit-mobile-menubar": ZanitMobileMenubar;
        "zanit-search-form": ZanitSearchForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Main menubar component. Each item can have a menu with subitems
             * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
             * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
             */
            "zanit-menubar": LocalJSX.ZanitMenubar & JSXBase.HTMLAttributes<HTMLZanitMenubarElement>;
            /**
             * Mobile menubar component.
             */
            "zanit-mobile-menubar": LocalJSX.ZanitMobileMenubar & JSXBase.HTMLAttributes<HTMLZanitMobileMenubarElement>;
            "zanit-search-form": LocalJSX.ZanitSearchForm & JSXBase.HTMLAttributes<HTMLZanitSearchFormElement>;
        }
    }
}
