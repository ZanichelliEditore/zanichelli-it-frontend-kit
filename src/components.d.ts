/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MenubarItem } from "./utils/types";
export { MenubarItem } from "./utils/types";
export namespace Components {
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface ZanitMenubar {
        /**
          * ID of the current active item.
         */
        "current": string | undefined;
        /**
          * The data to build the menu (as an array of `MenubarItem` or a JSON array) or the url to fetch to retrieve it.
         */
        "data": Promise<MenubarItem[]> | MenubarItem[] | URL | string;
        /**
          * Initial search query.
         */
        "searchQuery": string | undefined;
    }
    /**
     * Mobile menubar component.
     */
    interface ZanitMobileMenubar {
        /**
          * ID of the current active item.
         */
        "current": string | undefined;
        /**
          * Menubar items.
         */
        "items": MenubarItem[];
        /**
          * Initial search query.
         */
        "searchQuery": string | undefined;
    }
}
export interface ZanitMenubarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZanitMenubarElement;
}
export interface ZanitMobileMenubarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZanitMobileMenubarElement;
}
declare global {
    interface HTMLZanitMenubarElementEventMap {
        "search": { query: string };
    }
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface HTMLZanitMenubarElement extends Components.ZanitMenubar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZanitMenubarElementEventMap>(type: K, listener: (this: HTMLZanitMenubarElement, ev: ZanitMenubarCustomEvent<HTMLZanitMenubarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZanitMenubarElementEventMap>(type: K, listener: (this: HTMLZanitMenubarElement, ev: ZanitMenubarCustomEvent<HTMLZanitMenubarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZanitMenubarElement: {
        prototype: HTMLZanitMenubarElement;
        new (): HTMLZanitMenubarElement;
    };
    interface HTMLZanitMobileMenubarElementEventMap {
        "search": { query: string };
    }
    /**
     * Mobile menubar component.
     */
    interface HTMLZanitMobileMenubarElement extends Components.ZanitMobileMenubar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZanitMobileMenubarElementEventMap>(type: K, listener: (this: HTMLZanitMobileMenubarElement, ev: ZanitMobileMenubarCustomEvent<HTMLZanitMobileMenubarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZanitMobileMenubarElementEventMap>(type: K, listener: (this: HTMLZanitMobileMenubarElement, ev: ZanitMobileMenubarCustomEvent<HTMLZanitMobileMenubarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZanitMobileMenubarElement: {
        prototype: HTMLZanitMobileMenubarElement;
        new (): HTMLZanitMobileMenubarElement;
    };
    interface HTMLElementTagNameMap {
        "zanit-menubar": HTMLZanitMenubarElement;
        "zanit-mobile-menubar": HTMLZanitMobileMenubarElement;
    }
}
declare namespace LocalJSX {
    /**
     * Main menubar component. Each item can have a menu with subitems
     * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
     * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
     */
    interface ZanitMenubar {
        /**
          * ID of the current active item.
         */
        "current"?: string | undefined;
        /**
          * The data to build the menu (as an array of `MenubarItem` or a JSON array) or the url to fetch to retrieve it.
         */
        "data"?: Promise<MenubarItem[]> | MenubarItem[] | URL | string;
        /**
          * Emitted on search form submission.
         */
        "onSearch"?: (event: ZanitMenubarCustomEvent<{ query: string }>) => void;
        /**
          * Initial search query.
         */
        "searchQuery"?: string | undefined;
    }
    /**
     * Mobile menubar component.
     */
    interface ZanitMobileMenubar {
        /**
          * ID of the current active item.
         */
        "current"?: string | undefined;
        /**
          * Menubar items.
         */
        "items"?: MenubarItem[];
        /**
          * Emitted on search form submission.
         */
        "onSearch"?: (event: ZanitMobileMenubarCustomEvent<{ query: string }>) => void;
        /**
          * Initial search query.
         */
        "searchQuery"?: string | undefined;
    }
    interface IntrinsicElements {
        "zanit-menubar": ZanitMenubar;
        "zanit-mobile-menubar": ZanitMobileMenubar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * Main menubar component. Each item can have a menu with subitems
             * When a main menubar item is the current active one, a sub-menubar is shown and each subitem can have a menu with subitems.
             * @cssprop {--zanit-menubar-max-width} Maximum width of the menubar.
             */
            "zanit-menubar": LocalJSX.ZanitMenubar & JSXBase.HTMLAttributes<HTMLZanitMenubarElement>;
            /**
             * Mobile menubar component.
             */
            "zanit-mobile-menubar": LocalJSX.ZanitMobileMenubar & JSXBase.HTMLAttributes<HTMLZanitMobileMenubarElement>;
        }
    }
}
